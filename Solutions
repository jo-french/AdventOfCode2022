# Q1
import pandas as pd
import numpy as np0

with open('input.txt') as f:
    lines = f.read()

lines = lines.strip()
elves = lines.split("\n\n")

elfcalorylists = [elflist.split('\n') for elflist in elves]
intelfcalorylists = [[int(x) for x in elist] for elist in elfcalorylists]
elfcalories = [np.sum(elflist) for elflist in intelfcalorylists]

np.max(elfcalories)

sortedlist = elfcalories

sortedlist.sort(reverse=True)

np.sum(sortedlist[0:3])
sortedlist[0]+sortedlist[1]+sortedlist[2]

# Q2

import pandas as pd
import numpy as np

data = pd.read_csv('input.txt', sep = ' ', index_col=None, header=None)
data.set_axis(['Them', 'Me'], axis=1, inplace=True)

# Calculate win, lose, or draw
# A = Rock, B = Paper, C = Scissors
df = data

df = df.replace('A', 1)
df = df.replace('B', 2)
df = df.replace('C', 3)
df = df.replace('X', 1)
df = df.replace('Y', 2)
df = df.replace('Z', 3)

df['diff'] = df['Me'] - df['Them']
df = df.replace(-2, 1)
df = df.replace(-1, 2)

def score(val):
    if val == 0:
        return 3
    elif val == 1:
        return 6
    elif val == 2:
        return 0
    
df['winlosescore'] = df['diff'].apply(score)
df['totalscore'] = df['Me'] + df['winlosescore']

df['totalscore'].sum()

# X means you need to lose, Y means you need to end the round in a draw, and Z means you need to win.

def mynewmove(row):
    if row['Me'] == 1:
        return row['Them'] - 1
    elif row['Me'] == 2:
        return row['Them']
    elif row['Me'] == 3:
        return row['Them'] + 1
    
df['MyNewMove'] = df.apply (lambda row: mynewmove(row), axis=1)

df = df.replace(0, 3)
df = df.replace(4, 1)

df['newdiff'] = df['MyNewMove'] - df['Them']
df = df.replace(-2, 1)
df = df.replace(-1, 2)
df['newwinlosescore'] = df['newdiff'].apply(score)

df['newtotalscore'] = df['MyNewMove'] + df['newwinlosescore']
df['newtotalscore'].sum()

# Q3

import pandas as pd
import numpy as np

ord('a')
ord('A')
ord('Z') - ord('A') + 27
ord('b')
ord('b') - ord('a') + 1

# Convert lc letter to number by ord(letter) - ord('a') + 1
# Convert uc letter to number by ord(letter) - ord('A') + 27

with open('input.txt') as f:
    lines = f.read()

lines = lines.strip()
backpacks = lines.split('\n')

lengths = [len(s) for s in backpacks]
mids = [int(l/2) for l in lengths]

part1s = [backpacks[i][0:mids[i]] for i in range(len(backpacks))]
part2s = [backpacks[i][mids[i]:] for i in range(len(backpacks))]

intersections = [set(part1s[i]).intersection(set(part2s[i])) for i in range(len(backpacks))]
answers = [list(tVal) for tVal in intersections]
answers = [a[0] for a in answers]

def getPriority(letter):
    if letter.isupper():
        return ord(letter) - ord('A') + 27
    else:
        return ord(letter) - ord('a') + 1
    
priorities = [getPriority(l) for l in answers]
total = sum(priorities)

# Part2
elfgroups = []
for i in range(100):
    elfgroups.append(set(backpacks[3*i]).intersection(set(backpacks[3*i+1]), set(backpacks[3*i+2])))

eganswers = [list(tVal) for tVal in elfgroups]
eganswers = [a[0] for a in eganswers]

egpriorities = [getPriority(egl) for egl in eganswers]
egtotal = sum(egpriorities)

Q4

import pandas as pd
import numpy as np

with open('input.txt') as f:
    lines = f.read()

lines = lines.strip()

elves = lines.split('\n')
elves1 = [e.split(',')[0] for e in elves]
elves2 = [e.split(',')[1] for e in elves]

e11 = [int(e.split('-')[0]) for e in elves1]
e12 = [int(e.split('-')[1]) for e in elves1]

e21 = [int(e.split('-')[0]) for e in elves2]
e22 = [int(e.split('-')[1]) for e in elves2]

combined = list(zip(e11, e12, e21, e22))

def elfrcontainselfr(r):
    if (r[0] <= r[2] and r[3] <= r[1]):
        return 1
    elif (r[2] <= r[0] and r[1] <= r[3]):
        return 1
    else:
        return 0
    
containments = [elfrcontainselfr(r) for r in combined]
sum(containments)

def overlap(r):
    if (r[0] >= r[2] and r[0] <= r[3]):
        return 1
    elif (r[2] >= r[0] and r[2] <= r[1]):
        return 1
    else:
        return 0

overlapping = [overlap(r) for r in combined]

sum(overlapping)
